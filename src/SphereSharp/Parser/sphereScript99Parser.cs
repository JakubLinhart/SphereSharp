//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /mnt/c/Users/jakub/sources/ultima/SphereSharp/SphereSharp/src/SphereSharp/Parser/sphereScript99.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class sphereScript99Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, SYMBOL=7, NUMBER=8, BINARY_OPERATOR=9, 
		LITERAL=10, LPAREN=11, RPAREN=12;
	public const int
		RULE_macro = 0, RULE_call = 1, RULE_argumentList = 2, RULE_argument = 3, 
		RULE_expressionArgument = 4, RULE_unquotedLiteralArgument = 5, RULE_operand = 6, 
		RULE_binaryOperation = 7, RULE_operator = 8, RULE_constantExpression = 9, 
		RULE_macroExpression = 10, RULE_subExpression = 11, RULE_macroOperator = 12, 
		RULE_constantOperator = 13;
	public static readonly string[] ruleNames = {
		"macro", "call", "argumentList", "argument", "expressionArgument", "unquotedLiteralArgument", 
		"operand", "binaryOperation", "operator", "constantExpression", "macroExpression", 
		"subExpression", "macroOperator", "constantOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<'", "'>'", "','", "' '", "'['", "']'", null, null, null, null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "SYMBOL", "NUMBER", "BINARY_OPERATOR", 
		"LITERAL", "LPAREN", "RPAREN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sphereScript99.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sphereScript99Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sphereScript99Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sphereScript99Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class MacroContext : ParserRuleContext {
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 0, RULE_macro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(T__0);
			State = 29; call();
			State = 30; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public ITerminalNode SYMBOL() { return GetToken(sphereScript99Parser.SYMBOL, 0); }
		public ITerminalNode LPAREN() { return GetToken(sphereScript99Parser.LPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(sphereScript99Parser.RPAREN, 0); }
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 2, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(SYMBOL);
			State = 33; Match(LPAREN);
			State = 34; argumentList();
			State = 35; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 4, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; argument();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 38; Match(T__2);
				State = 39; argument();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionArgumentContext expressionArgument() {
			return GetRuleContext<ExpressionArgumentContext>(0);
		}
		public UnquotedLiteralArgumentContext unquotedLiteralArgument() {
			return GetRuleContext<UnquotedLiteralArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 6, RULE_argument);
		try {
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; expressionArgument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46; unquotedLiteralArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionArgumentContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public BinaryOperationContext[] binaryOperation() {
			return GetRuleContexts<BinaryOperationContext>();
		}
		public BinaryOperationContext binaryOperation(int i) {
			return GetRuleContext<BinaryOperationContext>(i);
		}
		public ExpressionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterExpressionArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitExpressionArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionArgumentContext expressionArgument() {
		ExpressionArgumentContext _localctx = new ExpressionArgumentContext(Context, State);
		EnterRule(_localctx, 8, RULE_expressionArgument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; operand();
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==BINARY_OPERATOR) {
				{
				{
				State = 50; binaryOperation();
				}
				}
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedLiteralArgumentContext : ParserRuleContext {
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public ITerminalNode[] SYMBOL() { return GetTokens(sphereScript99Parser.SYMBOL); }
		public ITerminalNode SYMBOL(int i) {
			return GetToken(sphereScript99Parser.SYMBOL, i);
		}
		public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(sphereScript99Parser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(sphereScript99Parser.NUMBER, i);
		}
		public UnquotedLiteralArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedLiteralArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterUnquotedLiteralArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitUnquotedLiteralArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedLiteralArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedLiteralArgumentContext unquotedLiteralArgument() {
		UnquotedLiteralArgumentContext _localctx = new UnquotedLiteralArgumentContext(Context, State);
		EnterRule(_localctx, 10, RULE_unquotedLiteralArgument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 64;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 56; call();
						}
						break;
					case 2:
						{
						State = 57; Match(SYMBOL);
						}
						break;
					case 3:
						{
						State = 58; macro();
						}
						break;
					case 4:
						{
						State = 59; @operator();
						}
						break;
					case 5:
						{
						State = 60; Match(NUMBER);
						}
						break;
					case 6:
						{
						State = 61; Match(T__3);
						}
						break;
					case 7:
						{
						State = 62; Match(T__4);
						}
						break;
					case 8:
						{
						State = 63; Match(T__5);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public SubExpressionContext subExpression() {
			return GetRuleContext<SubExpressionContext>(0);
		}
		public MacroExpressionContext macroExpression() {
			return GetRuleContext<MacroExpressionContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 12, RULE_operand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 68; constantExpression();
				}
				break;
			case LPAREN:
				{
				State = 69; subExpression();
				}
				break;
			case T__0:
				{
				State = 70; macroExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOperationContext : ParserRuleContext {
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public BinaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterBinaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitBinaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperationContext binaryOperation() {
		BinaryOperationContext _localctx = new BinaryOperationContext(Context, State);
		EnterRule(_localctx, 14, RULE_binaryOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; @operator();
			State = 74; operand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ConstantOperatorContext constantOperator() {
			return GetRuleContext<ConstantOperatorContext>(0);
		}
		public MacroOperatorContext macroOperator() {
			return GetRuleContext<MacroOperatorContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINARY_OPERATOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 76; constantOperator();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 77; macroOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(sphereScript99Parser.NUMBER, 0); }
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroExpressionContext : ParserRuleContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MacroExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMacroExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMacroExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroExpressionContext macroExpression() {
		MacroExpressionContext _localctx = new MacroExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_macroExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubExpressionContext : ParserRuleContext {
		public ExpressionArgumentContext expressionArgument() {
			return GetRuleContext<ExpressionArgumentContext>(0);
		}
		public SubExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterSubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitSubExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubExpressionContext subExpression() {
		SubExpressionContext _localctx = new SubExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_subExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(LPAREN);
			State = 85; expressionArgument();
			State = 86; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroOperatorContext : ParserRuleContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MacroOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMacroOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMacroOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroOperatorContext macroOperator() {
		MacroOperatorContext _localctx = new MacroOperatorContext(Context, State);
		EnterRule(_localctx, 24, RULE_macroOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantOperatorContext : ParserRuleContext {
		public ITerminalNode BINARY_OPERATOR() { return GetToken(sphereScript99Parser.BINARY_OPERATOR, 0); }
		public ConstantOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterConstantOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitConstantOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantOperatorContext constantOperator() {
		ConstantOperatorContext _localctx = new ConstantOperatorContext(Context, State);
		EnterRule(_localctx, 26, RULE_constantOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(BINARY_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '_', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '+', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '.', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x32', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x36', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x39', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x6', '\a', '\x43', '\n', 
		'\a', '\r', '\a', '\xE', '\a', '\x44', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', 'J', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'Q', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x44', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x2', 
		'\x2', '\x2', '^', '\x2', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x4', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\n', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x42', '\x3', '\x2', '\x2', '\x2', '\xE', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'K', '\x3', '\x2', '\x2', '\x2', '\x12', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'R', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'T', '\x3', '\x2', '\x2', '\x2', '\x18', 'V', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1C', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\x5', 
		'\x4', '\x3', '\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\t', '\x2', '\x2', '#', 
		'$', '\a', '\r', '\x2', '\x2', '$', '%', '\x5', '\x6', '\x4', '\x2', '%', 
		'&', '\a', '\xE', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\'', ',', '\x5', '\b', '\x5', '\x2', '(', ')', '\a', '\x5', '\x2', '\x2', 
		')', '+', '\x5', '\b', '\x5', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\a', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x32', '\x5', '\n', 
		'\x6', '\x2', '\x30', '\x32', '\x5', '\f', '\a', '\x2', '\x31', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x33', '\x37', '\x5', '\xE', '\b', 
		'\x2', '\x34', '\x36', '\x5', '\x10', '\t', '\x2', '\x35', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x39', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\v', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x43', '\x5', '\x4', '\x3', '\x2', ';', '\x43', 
		'\a', '\t', '\x2', '\x2', '<', '\x43', '\x5', '\x2', '\x2', '\x2', '=', 
		'\x43', '\x5', '\x12', '\n', '\x2', '>', '\x43', '\a', '\n', '\x2', '\x2', 
		'?', '\x43', '\a', '\x6', '\x2', '\x2', '@', '\x43', '\a', '\a', '\x2', 
		'\x2', '\x41', '\x43', '\a', '\b', '\x2', '\x2', '\x42', ':', '\x3', '\x2', 
		'\x2', '\x2', '\x42', ';', '\x3', '\x2', '\x2', '\x2', '\x42', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '=', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'>', '\x3', '\x2', '\x2', '\x2', '\x42', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x45', '\r', '\x3', '\x2', '\x2', '\x2', '\x46', 'J', '\x5', '\x14', 
		'\v', '\x2', 'G', 'J', '\x5', '\x18', '\r', '\x2', 'H', 'J', '\x5', '\x16', 
		'\f', '\x2', 'I', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x5', '\x12', '\n', '\x2', 'L', 
		'M', '\x5', '\xE', '\b', '\x2', 'M', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'N', 'Q', '\x5', '\x1C', '\xF', '\x2', 'O', 'Q', '\x5', '\x1A', '\xE', 
		'\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'Q', '\x13', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\n', 
		'\x2', '\x2', 'S', '\x15', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x5', 
		'\x2', '\x2', '\x2', 'U', '\x17', '\x3', '\x2', '\x2', '\x2', 'V', 'W', 
		'\a', '\r', '\x2', '\x2', 'W', 'X', '\x5', '\n', '\x6', '\x2', 'X', 'Y', 
		'\a', '\xE', '\x2', '\x2', 'Y', '\x19', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x5', '\x2', '\x2', '\x2', '[', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\a', '\v', '\x2', '\x2', ']', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\t', ',', '\x31', '\x37', '\x42', '\x44', 'I', 'P',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
