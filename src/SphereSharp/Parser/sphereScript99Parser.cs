//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /work/sphereScript99.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class sphereScript99Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, NEWLINE=6, WS=7, EOF_SECTION_HEADER=8, 
		FUNCTION_SECTION_HEADER_START=9, IF=10, ELSEIF=11, ELSE=12, ENDIF=13, 
		NATIVE_FUNCTIONS=14, SYSMESSAGE=15, RETURN=16, TIMER=17, CONSUME=18, EVAL_FUNCTIONS=19, 
		EVAL=20, HVAL=21, SAFE=22, SYMBOL=23, NUMBER=24, EQUAL=25, ASSIGN=26, 
		NOT_EQUAL=27, MORE_THAN=28, LESS_THAN=29, PLUS=30, MINUS=31, MULTIPLY=32, 
		MORE_THAN_EQUAL=33, LESS_THAN_EQUAL=34, LPAREN=35, RPAREN=36;
	public const int
		RULE_file = 0, RULE_section = 1, RULE_eofSection = 2, RULE_functionSection = 3, 
		RULE_functionSectionHeader = 4, RULE_codeBlock = 5, RULE_statement = 6, 
		RULE_ifStatement = 7, RULE_elseIfStatement = 8, RULE_elseStatement = 9, 
		RULE_macro = 10, RULE_call = 11, RULE_assignment = 12, RULE_memberAccess = 13, 
		RULE_evalCall = 14, RULE_nativeMemberAccess = 15, RULE_nativeArgumentList = 16, 
		RULE_customMemberAccess = 17, RULE_chainedMemberAccess = 18, RULE_memberName = 19, 
		RULE_enclosedArgumentList = 20, RULE_argumentList = 21, RULE_argument = 22, 
		RULE_expressionArgument = 23, RULE_quotedLiteralArgument = 24, RULE_unquotedLiteralArgument = 25, 
		RULE_signedArgumentOperand = 26, RULE_argumentOperand = 27, RULE_argumentBinaryOperation = 28, 
		RULE_argumentOperator = 29, RULE_argumentSubExpression = 30, RULE_argumentBinaryOperator = 31, 
		RULE_evalExpression = 32, RULE_signedEvalOperand = 33, RULE_evalOperand = 34, 
		RULE_evalBinaryOperation = 35, RULE_evalOperator = 36, RULE_evalSubExpression = 37, 
		RULE_evalBinaryOperator = 38, RULE_constantExpression = 39, RULE_macroExpression = 40, 
		RULE_macroOperator = 41, RULE_unaryOperator = 42;
	public static readonly string[] ruleNames = {
		"file", "section", "eofSection", "functionSection", "functionSectionHeader", 
		"codeBlock", "statement", "ifStatement", "elseIfStatement", "elseStatement", 
		"macro", "call", "assignment", "memberAccess", "evalCall", "nativeMemberAccess", 
		"nativeArgumentList", "customMemberAccess", "chainedMemberAccess", "memberName", 
		"enclosedArgumentList", "argumentList", "argument", "expressionArgument", 
		"quotedLiteralArgument", "unquotedLiteralArgument", "signedArgumentOperand", 
		"argumentOperand", "argumentBinaryOperation", "argumentOperator", "argumentSubExpression", 
		"argumentBinaryOperator", "evalExpression", "signedEvalOperand", "evalOperand", 
		"evalBinaryOperation", "evalOperator", "evalSubExpression", "evalBinaryOperator", 
		"constantExpression", "macroExpression", "macroOperator", "unaryOperator"
	};

	private static readonly string[] _LiteralNames = {
		null, "']'", "'.'", "','", "'\"'", "'['", null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "'=='", "'='", "'!='", "'>'", "'<'", "'+'", "'-'", "'*'", 
		null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "NEWLINE", "WS", "EOF_SECTION_HEADER", 
		"FUNCTION_SECTION_HEADER_START", "IF", "ELSEIF", "ELSE", "ENDIF", "NATIVE_FUNCTIONS", 
		"SYSMESSAGE", "RETURN", "TIMER", "CONSUME", "EVAL_FUNCTIONS", "EVAL", 
		"HVAL", "SAFE", "SYMBOL", "NUMBER", "EQUAL", "ASSIGN", "NOT_EQUAL", "MORE_THAN", 
		"LESS_THAN", "PLUS", "MINUS", "MULTIPLY", "MORE_THAN_EQUAL", "LESS_THAN_EQUAL", 
		"LPAREN", "RPAREN"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "sphereScript99.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static sphereScript99Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public sphereScript99Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public sphereScript99Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public FunctionSectionContext[] functionSection() {
			return GetRuleContexts<FunctionSectionContext>();
		}
		public FunctionSectionContext functionSection(int i) {
			return GetRuleContext<FunctionSectionContext>(i);
		}
		public EofSectionContext eofSection() {
			return GetRuleContext<EofSectionContext>(0);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 86; functionSection();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FUNCTION_SECTION_HEADER_START );
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOF_SECTION_HEADER) {
				{
				State = 91; eofSection();
				}
			}

			State = 94; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SectionContext : ParserRuleContext {
		public FunctionSectionContext functionSection() {
			return GetRuleContext<FunctionSectionContext>(0);
		}
		public SectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SectionContext section() {
		SectionContext _localctx = new SectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; functionSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EofSectionContext : ParserRuleContext {
		public ITerminalNode EOF_SECTION_HEADER() { return GetToken(sphereScript99Parser.EOF_SECTION_HEADER, 0); }
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(sphereScript99Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(sphereScript99Parser.NEWLINE, i);
		}
		public EofSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eofSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEofSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEofSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEofSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EofSectionContext eofSection() {
		EofSectionContext _localctx = new EofSectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_eofSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(EOF_SECTION_HEADER);
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEWLINE:
				{
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 99; Match(NEWLINE);
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NEWLINE );
				}
				break;
			case Eof:
				{
				State = 104; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSectionContext : ParserRuleContext {
		public FunctionSectionHeaderContext functionSectionHeader() {
			return GetRuleContext<FunctionSectionHeaderContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public FunctionSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterFunctionSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitFunctionSection(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSectionContext functionSection() {
		FunctionSectionContext _localctx = new FunctionSectionContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; functionSectionHeader();
			State = 108; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSectionHeaderContext : ParserRuleContext {
		public ITerminalNode FUNCTION_SECTION_HEADER_START() { return GetToken(sphereScript99Parser.FUNCTION_SECTION_HEADER_START, 0); }
		public ITerminalNode SYMBOL() { return GetToken(sphereScript99Parser.SYMBOL, 0); }
		public ITerminalNode NEWLINE() { return GetToken(sphereScript99Parser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public FunctionSectionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSectionHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterFunctionSectionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitFunctionSectionHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionSectionHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSectionHeaderContext functionSectionHeader() {
		FunctionSectionHeaderContext _localctx = new FunctionSectionHeaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionSectionHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110; Match(FUNCTION_SECTION_HEADER_START);
			State = 111; Match(SYMBOL);
			State = 112; Match(T__0);
			State = 113;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterCodeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitCodeBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_codeBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 115; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(sphereScript99Parser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 120; Match(WS);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 126; call();
				}
				break;
			case 2:
				{
				State = 127; assignment();
				}
				break;
			case 3:
				{
				State = 128; ifStatement();
				}
				break;
			}
			State = 131;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(sphereScript99Parser.IF, 0); }
		public EvalExpressionContext evalExpression() {
			return GetRuleContext<EvalExpressionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode ENDIF() { return GetToken(sphereScript99Parser.ENDIF, 0); }
		public ITerminalNode NEWLINE() { return GetToken(sphereScript99Parser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(IF);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 134; Match(WS);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WS );
			State = 139; evalExpression();
			State = 140;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 141; codeBlock();
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 142; elseIfStatement();
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 148; elseStatement();
				}
				break;
			}
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 151; Match(WS);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 157; Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(sphereScript99Parser.ELSEIF, 0); }
		public EvalExpressionContext evalExpression() {
			return GetRuleContext<EvalExpressionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(sphereScript99Parser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseIfStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 159; Match(WS);
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165; Match(ELSEIF);
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 166; Match(WS);
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WS );
			State = 171; evalExpression();
			State = 172;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 173; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(sphereScript99Parser.ELSE, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(sphereScript99Parser.NEWLINE, 0); }
		public ITerminalNode Eof() { return GetToken(sphereScript99Parser.Eof, 0); }
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 175; Match(WS);
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 181; Match(ELSE);
			State = 182;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 183; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroContext : ParserRuleContext {
		public ITerminalNode LESS_THAN() { return GetToken(sphereScript99Parser.LESS_THAN, 0); }
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public ITerminalNode MORE_THAN() { return GetToken(sphereScript99Parser.MORE_THAN, 0); }
		public MacroContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroContext macro() {
		MacroContext _localctx = new MacroContext(Context, State);
		EnterRule(_localctx, 20, RULE_macro);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(LESS_THAN);
			State = 186; memberAccess();
			State = 187; Match(MORE_THAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 22, RULE_call);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; memberAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(sphereScript99Parser.ASSIGN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; memberAccess();
			State = 192; Match(ASSIGN);
			State = 193; argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public EvalCallContext evalCall() {
			return GetRuleContext<EvalCallContext>(0);
		}
		public NativeMemberAccessContext nativeMemberAccess() {
			return GetRuleContext<NativeMemberAccessContext>(0);
		}
		public CustomMemberAccessContext customMemberAccess() {
			return GetRuleContext<CustomMemberAccessContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext memberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 26, RULE_memberAccess);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EVAL_FUNCTIONS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; evalCall();
				}
				break;
			case NATIVE_FUNCTIONS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; nativeMemberAccess();
				}
				break;
			case SYMBOL:
			case LESS_THAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197; customMemberAccess();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalCallContext : ParserRuleContext {
		public ITerminalNode EVAL_FUNCTIONS() { return GetToken(sphereScript99Parser.EVAL_FUNCTIONS, 0); }
		public EvalExpressionContext evalExpression() {
			return GetRuleContext<EvalExpressionContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public EvalCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalCallContext evalCall() {
		EvalCallContext _localctx = new EvalCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_evalCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(EVAL_FUNCTIONS);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 201; Match(WS);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207; evalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeMemberAccessContext : ParserRuleContext {
		public ITerminalNode NATIVE_FUNCTIONS() { return GetToken(sphereScript99Parser.NATIVE_FUNCTIONS, 0); }
		public NativeArgumentListContext nativeArgumentList() {
			return GetRuleContext<NativeArgumentListContext>(0);
		}
		public ChainedMemberAccessContext chainedMemberAccess() {
			return GetRuleContext<ChainedMemberAccessContext>(0);
		}
		public NativeMemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeMemberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterNativeMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitNativeMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeMemberAccessContext nativeMemberAccess() {
		NativeMemberAccessContext _localctx = new NativeMemberAccessContext(Context, State);
		EnterRule(_localctx, 30, RULE_nativeMemberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(NATIVE_FUNCTIONS);
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 210; nativeArgumentList();
				}
				break;
			}
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 213; chainedMemberAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeArgumentListContext : ParserRuleContext {
		public EnclosedArgumentListContext enclosedArgumentList() {
			return GetRuleContext<EnclosedArgumentListContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public NativeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterNativeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitNativeArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNativeArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NativeArgumentListContext nativeArgumentList() {
		NativeArgumentListContext _localctx = new NativeArgumentListContext(Context, State);
		EnterRule(_localctx, 32, RULE_nativeArgumentList);
		try {
			int _alt;
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; enclosedArgumentList();
				}
				break;
			case WS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 218;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 217; Match(WS);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 220;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 222; argumentList();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomMemberAccessContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public EnclosedArgumentListContext enclosedArgumentList() {
			return GetRuleContext<EnclosedArgumentListContext>(0);
		}
		public ChainedMemberAccessContext chainedMemberAccess() {
			return GetRuleContext<ChainedMemberAccessContext>(0);
		}
		public CustomMemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customMemberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterCustomMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitCustomMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomMemberAccessContext customMemberAccess() {
		CustomMemberAccessContext _localctx = new CustomMemberAccessContext(Context, State);
		EnterRule(_localctx, 34, RULE_customMemberAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; memberName();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 226; enclosedArgumentList();
				}
			}

			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 229; chainedMemberAccess();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChainedMemberAccessContext : ParserRuleContext {
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public ChainedMemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chainedMemberAccess; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterChainedMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitChainedMemberAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChainedMemberAccess(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChainedMemberAccessContext chainedMemberAccess() {
		ChainedMemberAccessContext _localctx = new ChainedMemberAccessContext(Context, State);
		EnterRule(_localctx, 36, RULE_chainedMemberAccess);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(T__1);
			State = 233; memberAccess();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public ITerminalNode[] SYMBOL() { return GetTokens(sphereScript99Parser.SYMBOL); }
		public ITerminalNode SYMBOL(int i) {
			return GetToken(sphereScript99Parser.SYMBOL, i);
		}
		public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext memberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_memberName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 237;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case SYMBOL:
						{
						State = 235; Match(SYMBOL);
						}
						break;
					case LESS_THAN:
						{
						State = 236; macro();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnclosedArgumentListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(sphereScript99Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(sphereScript99Parser.RPAREN, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public EnclosedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enclosedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEnclosedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEnclosedArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnclosedArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnclosedArgumentListContext enclosedArgumentList() {
		EnclosedArgumentListContext _localctx = new EnclosedArgumentListContext(Context, State);
		EnterRule(_localctx, 40, RULE_enclosedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(LPAREN);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__3) | (1L << T__4) | (1L << WS) | (1L << NATIVE_FUNCTIONS) | (1L << EVAL_FUNCTIONS) | (1L << SYMBOL) | (1L << NUMBER) | (1L << LESS_THAN) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << LPAREN))) != 0)) {
				{
				State = 242; argumentList();
				}
			}

			State = 245; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 42, RULE_argumentList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; argument();
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 248; Match(T__2);
					State = 249; argument();
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionArgumentContext expressionArgument() {
			return GetRuleContext<ExpressionArgumentContext>(0);
		}
		public QuotedLiteralArgumentContext quotedLiteralArgument() {
			return GetRuleContext<QuotedLiteralArgumentContext>(0);
		}
		public UnquotedLiteralArgumentContext unquotedLiteralArgument() {
			return GetRuleContext<UnquotedLiteralArgumentContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 44, RULE_argument);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; expressionArgument();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; quotedLiteralArgument();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 257; unquotedLiteralArgument();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionArgumentContext : ParserRuleContext {
		public SignedArgumentOperandContext signedArgumentOperand() {
			return GetRuleContext<SignedArgumentOperandContext>(0);
		}
		public ArgumentBinaryOperationContext[] argumentBinaryOperation() {
			return GetRuleContexts<ArgumentBinaryOperationContext>();
		}
		public ArgumentBinaryOperationContext argumentBinaryOperation(int i) {
			return GetRuleContext<ArgumentBinaryOperationContext>(i);
		}
		public ExpressionArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterExpressionArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitExpressionArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionArgumentContext expressionArgument() {
		ExpressionArgumentContext _localctx = new ExpressionArgumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionArgument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; signedArgumentOperand();
			State = 264;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 261; argumentBinaryOperation();
					}
					} 
				}
				State = 266;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedLiteralArgumentContext : ParserRuleContext {
		public UnquotedLiteralArgumentContext unquotedLiteralArgument() {
			return GetRuleContext<UnquotedLiteralArgumentContext>(0);
		}
		public QuotedLiteralArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedLiteralArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterQuotedLiteralArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitQuotedLiteralArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedLiteralArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotedLiteralArgumentContext quotedLiteralArgument() {
		QuotedLiteralArgumentContext _localctx = new QuotedLiteralArgumentContext(Context, State);
		EnterRule(_localctx, 48, RULE_quotedLiteralArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(T__3);
			State = 268; unquotedLiteralArgument();
			State = 269; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedLiteralArgumentContext : ParserRuleContext {
		public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public ITerminalNode[] SYMBOL() { return GetTokens(sphereScript99Parser.SYMBOL); }
		public ITerminalNode SYMBOL(int i) {
			return GetToken(sphereScript99Parser.SYMBOL, i);
		}
		public MacroContext[] macro() {
			return GetRuleContexts<MacroContext>();
		}
		public MacroContext macro(int i) {
			return GetRuleContext<MacroContext>(i);
		}
		public ArgumentOperatorContext[] argumentOperator() {
			return GetRuleContexts<ArgumentOperatorContext>();
		}
		public ArgumentOperatorContext argumentOperator(int i) {
			return GetRuleContext<ArgumentOperatorContext>(i);
		}
		public ITerminalNode[] NUMBER() { return GetTokens(sphereScript99Parser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(sphereScript99Parser.NUMBER, i);
		}
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public UnquotedLiteralArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedLiteralArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterUnquotedLiteralArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitUnquotedLiteralArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedLiteralArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedLiteralArgumentContext unquotedLiteralArgument() {
		UnquotedLiteralArgumentContext _localctx = new UnquotedLiteralArgumentContext(Context, State);
		EnterRule(_localctx, 50, RULE_unquotedLiteralArgument);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 279;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						State = 271; memberAccess();
						}
						break;
					case 2:
						{
						State = 272; Match(SYMBOL);
						}
						break;
					case 3:
						{
						State = 273; macro();
						}
						break;
					case 4:
						{
						State = 274; argumentOperator();
						}
						break;
					case 5:
						{
						State = 275; Match(NUMBER);
						}
						break;
					case 6:
						{
						State = 276; Match(WS);
						}
						break;
					case 7:
						{
						State = 277; Match(T__4);
						}
						break;
					case 8:
						{
						State = 278; Match(T__0);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 281;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedArgumentOperandContext : ParserRuleContext {
		public SignedArgumentOperandContext signedArgumentOperand() {
			return GetRuleContext<SignedArgumentOperandContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(sphereScript99Parser.MINUS, 0); }
		public ITerminalNode PLUS() { return GetToken(sphereScript99Parser.PLUS, 0); }
		public ArgumentOperandContext argumentOperand() {
			return GetRuleContext<ArgumentOperandContext>(0);
		}
		public SignedArgumentOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedArgumentOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterSignedArgumentOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitSignedArgumentOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedArgumentOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedArgumentOperandContext signedArgumentOperand() {
		SignedArgumentOperandContext _localctx = new SignedArgumentOperandContext(Context, State);
		EnterRule(_localctx, 52, RULE_signedArgumentOperand);
		int _la;
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 283;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 284; signedArgumentOperand();
				}
				break;
			case NUMBER:
			case LESS_THAN:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; argumentOperand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentOperandContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ArgumentSubExpressionContext argumentSubExpression() {
			return GetRuleContext<ArgumentSubExpressionContext>(0);
		}
		public MacroExpressionContext macroExpression() {
			return GetRuleContext<MacroExpressionContext>(0);
		}
		public ArgumentOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentOperandContext argumentOperand() {
		ArgumentOperandContext _localctx = new ArgumentOperandContext(Context, State);
		EnterRule(_localctx, 54, RULE_argumentOperand);
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 288; constantExpression();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 289; argumentSubExpression();
				}
				break;
			case LESS_THAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 290; macroExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentBinaryOperationContext : ParserRuleContext {
		public ArgumentOperatorContext argumentOperator() {
			return GetRuleContext<ArgumentOperatorContext>(0);
		}
		public SignedArgumentOperandContext signedArgumentOperand() {
			return GetRuleContext<SignedArgumentOperandContext>(0);
		}
		public ArgumentBinaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentBinaryOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentBinaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentBinaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentBinaryOperationContext argumentBinaryOperation() {
		ArgumentBinaryOperationContext _localctx = new ArgumentBinaryOperationContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentBinaryOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; argumentOperator();
			State = 294; signedArgumentOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentOperatorContext : ParserRuleContext {
		public ArgumentBinaryOperatorContext argumentBinaryOperator() {
			return GetRuleContext<ArgumentBinaryOperatorContext>(0);
		}
		public MacroOperatorContext macroOperator() {
			return GetRuleContext<MacroOperatorContext>(0);
		}
		public ArgumentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentOperatorContext argumentOperator() {
		ArgumentOperatorContext _localctx = new ArgumentOperatorContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentOperator);
		try {
			State = 298;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
			case MULTIPLY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; argumentBinaryOperator();
				}
				break;
			case LESS_THAN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; macroOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentSubExpressionContext : ParserRuleContext {
		public ExpressionArgumentContext expressionArgument() {
			return GetRuleContext<ExpressionArgumentContext>(0);
		}
		public ArgumentSubExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentSubExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentSubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentSubExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentSubExpressionContext argumentSubExpression() {
		ArgumentSubExpressionContext _localctx = new ArgumentSubExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_argumentSubExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; Match(LPAREN);
			State = 301; expressionArgument();
			State = 302; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentBinaryOperatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(sphereScript99Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(sphereScript99Parser.MINUS, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(sphereScript99Parser.MULTIPLY, 0); }
		public ArgumentBinaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentBinaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterArgumentBinaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitArgumentBinaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentBinaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentBinaryOperatorContext argumentBinaryOperator() {
		ArgumentBinaryOperatorContext _localctx = new ArgumentBinaryOperatorContext(Context, State);
		EnterRule(_localctx, 62, RULE_argumentBinaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalExpressionContext : ParserRuleContext {
		public SignedEvalOperandContext signedEvalOperand() {
			return GetRuleContext<SignedEvalOperandContext>(0);
		}
		public EvalBinaryOperationContext[] evalBinaryOperation() {
			return GetRuleContexts<EvalBinaryOperationContext>();
		}
		public EvalBinaryOperationContext evalBinaryOperation(int i) {
			return GetRuleContext<EvalBinaryOperationContext>(i);
		}
		public EvalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalExpressionContext evalExpression() {
		EvalExpressionContext _localctx = new EvalExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_evalExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; signedEvalOperand();
			State = 310;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 307; evalBinaryOperation();
					}
					} 
				}
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedEvalOperandContext : ParserRuleContext {
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public SignedEvalOperandContext signedEvalOperand() {
			return GetRuleContext<SignedEvalOperandContext>(0);
		}
		public EvalOperandContext evalOperand() {
			return GetRuleContext<EvalOperandContext>(0);
		}
		public SignedEvalOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedEvalOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterSignedEvalOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitSignedEvalOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignedEvalOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedEvalOperandContext signedEvalOperand() {
		SignedEvalOperandContext _localctx = new SignedEvalOperandContext(Context, State);
		EnterRule(_localctx, 66, RULE_signedEvalOperand);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 313; unaryOperator();
				State = 314; signedEvalOperand();
				}
				break;
			case NATIVE_FUNCTIONS:
			case EVAL_FUNCTIONS:
			case SYMBOL:
			case NUMBER:
			case LESS_THAN:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 316; evalOperand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalOperandContext : ParserRuleContext {
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EvalSubExpressionContext evalSubExpression() {
			return GetRuleContext<EvalSubExpressionContext>(0);
		}
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MemberAccessContext memberAccess() {
			return GetRuleContext<MemberAccessContext>(0);
		}
		public EvalOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalOperand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalOperandContext evalOperand() {
		EvalOperandContext _localctx = new EvalOperandContext(Context, State);
		EnterRule(_localctx, 68, RULE_evalOperand);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; constantExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; evalSubExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321; macro();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322; memberAccess();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalBinaryOperationContext : ParserRuleContext {
		public EvalOperatorContext evalOperator() {
			return GetRuleContext<EvalOperatorContext>(0);
		}
		public SignedEvalOperandContext signedEvalOperand() {
			return GetRuleContext<SignedEvalOperandContext>(0);
		}
		public EvalBinaryOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalBinaryOperation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalBinaryOperation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalBinaryOperation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalBinaryOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalBinaryOperationContext evalBinaryOperation() {
		EvalBinaryOperationContext _localctx = new EvalBinaryOperationContext(Context, State);
		EnterRule(_localctx, 70, RULE_evalBinaryOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325; evalOperator();
			State = 326; signedEvalOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalOperatorContext : ParserRuleContext {
		public EvalBinaryOperatorContext evalBinaryOperator() {
			return GetRuleContext<EvalBinaryOperatorContext>(0);
		}
		public MacroOperatorContext macroOperator() {
			return GetRuleContext<MacroOperatorContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(sphereScript99Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(sphereScript99Parser.WS, i);
		}
		public EvalOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalOperatorContext evalOperator() {
		EvalOperatorContext _localctx = new EvalOperatorContext(Context, State);
		EnterRule(_localctx, 72, RULE_evalOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 328; Match(WS);
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 334; evalBinaryOperator();
				}
				break;
			case 2:
				{
				State = 335; macroOperator();
				}
				break;
			}
			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 338; Match(WS);
				}
				}
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalSubExpressionContext : ParserRuleContext {
		public EvalExpressionContext evalExpression() {
			return GetRuleContext<EvalExpressionContext>(0);
		}
		public EvalSubExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalSubExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalSubExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalSubExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalSubExpressionContext evalSubExpression() {
		EvalSubExpressionContext _localctx = new EvalSubExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_evalSubExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(LPAREN);
			State = 345; evalExpression();
			State = 346; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EvalBinaryOperatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(sphereScript99Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(sphereScript99Parser.MINUS, 0); }
		public ITerminalNode MULTIPLY() { return GetToken(sphereScript99Parser.MULTIPLY, 0); }
		public ITerminalNode EQUAL() { return GetToken(sphereScript99Parser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(sphereScript99Parser.NOT_EQUAL, 0); }
		public ITerminalNode MORE_THAN_EQUAL() { return GetToken(sphereScript99Parser.MORE_THAN_EQUAL, 0); }
		public ITerminalNode LESS_THAN_EQUAL() { return GetToken(sphereScript99Parser.LESS_THAN_EQUAL, 0); }
		public ITerminalNode MORE_THAN() { return GetToken(sphereScript99Parser.MORE_THAN, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(sphereScript99Parser.LESS_THAN, 0); }
		public EvalBinaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_evalBinaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterEvalBinaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitEvalBinaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvalBinaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EvalBinaryOperatorContext evalBinaryOperator() {
		EvalBinaryOperatorContext _localctx = new EvalBinaryOperatorContext(Context, State);
		EnterRule(_localctx, 76, RULE_evalBinaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOT_EQUAL) | (1L << MORE_THAN) | (1L << LESS_THAN) | (1L << PLUS) | (1L << MINUS) | (1L << MULTIPLY) | (1L << MORE_THAN_EQUAL) | (1L << LESS_THAN_EQUAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(sphereScript99Parser.NUMBER, 0); }
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroExpressionContext : ParserRuleContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MacroExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMacroExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMacroExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroExpressionContext macroExpression() {
		MacroExpressionContext _localctx = new MacroExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_macroExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroOperatorContext : ParserRuleContext {
		public MacroContext macro() {
			return GetRuleContext<MacroContext>(0);
		}
		public MacroOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterMacroOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitMacroOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroOperatorContext macroOperator() {
		MacroOperatorContext _localctx = new MacroOperatorContext(Context, State);
		EnterRule(_localctx, 82, RULE_macroOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354; macro();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(sphereScript99Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(sphereScript99Parser.MINUS, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IsphereScript99Listener typedListener = listener as IsphereScript99Listener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IsphereScript99Visitor<TResult> typedVisitor = visitor as IsphereScript99Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext unaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 84, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\x169', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x3', '\x2', '\x6', '\x2', 'Z', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '[', '\x3', '\x2', '\x5', '\x2', '_', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x6', '\x4', 'g', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'h', '\x3', 
		'\x4', '\x5', '\x4', 'l', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x6', '\a', 'w', '\n', '\a', '\r', '\a', '\xE', '\a', 
		'x', '\x3', '\b', '\a', '\b', '|', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x7F', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x84', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x6', '\t', '\x8A', '\n', '\t', '\r', '\t', '\xE', '\t', '\x8B', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x92', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x95', '\v', '\t', '\x3', '\t', '\x5', 
		'\t', '\x98', '\n', '\t', '\x3', '\t', '\a', '\t', '\x9B', '\n', '\t', 
		'\f', '\t', '\xE', '\t', '\x9E', '\v', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\a', '\n', '\xA3', '\n', '\n', '\f', '\n', '\xE', '\n', 
		'\xA6', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', '\xAA', '\n', 
		'\n', '\r', '\n', '\xE', '\n', '\xAB', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\a', '\v', '\xB3', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\xB6', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xC9', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\xCD', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\xD0', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD6', '\n', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\xD9', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x6', '\x12', '\xDD', '\n', '\x12', '\r', '\x12', '\xE', 
		'\x12', '\xDE', '\x3', '\x12', '\x5', '\x12', '\xE2', '\n', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xE6', '\n', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\xE9', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x6', '\x15', '\xF0', '\n', '\x15', 
		'\r', '\x15', '\xE', '\x15', '\xF1', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\xF6', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xFD', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x100', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x105', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\a', '\x19', '\x109', '\n', '\x19', '\f', '\x19', '\xE', '\x19', 
		'\x10C', '\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x6', '\x1B', '\x11A', 
		'\n', '\x1B', '\r', '\x1B', '\xE', '\x1B', '\x11B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x121', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x126', '\n', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', 
		'\x1F', '\x12D', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x137', 
		'\n', '\"', '\f', '\"', '\xE', '\"', '\x13A', '\v', '\"', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x140', '\n', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x146', '\n', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\a', '&', '\x14C', '\n', 
		'&', '\f', '&', '\xE', '&', '\x14F', '\v', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x153', '\n', '&', '\x3', '&', '\a', '&', '\x156', '\n', 
		'&', '\f', '&', '\xE', '&', '\x159', '\v', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', 
		'\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', '\x11B', '\x2', '-', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', '\x2', '\x6', '\x3', '\x3', '\b', '\b', '\x3', '\x2', 
		' ', '!', '\x3', '\x2', ' ', '\"', '\x4', '\x2', '\x1B', '\x1B', '\x1D', 
		'$', '\x2', '\x170', '\x2', 'Y', '\x3', '\x2', '\x2', '\x2', '\x4', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'm', '\x3', '\x2', '\x2', '\x2', '\n', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'v', '\x3', '\x2', '\x2', '\x2', '\xE', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x87', '\x3', '\x2', '\x2', '\x2', '\x12', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x18', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xD3', '\x3', '\x2', '\x2', '\x2', '\"', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xE3', '\x3', '\x2', '\x2', '\x2', '&', '\xEA', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xEF', '\x3', '\x2', '\x2', '\x2', '*', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF9', '\x3', '\x2', '\x2', '\x2', '.', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x106', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x34', '\x119', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x120', '\x3', '\x2', '\x2', '\x2', '\x38', '\x125', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x12C', '\x3', '\x2', '\x2', '\x2', '>', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x132', '\x3', '\x2', '\x2', '\x2', '\x42', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x145', '\x3', '\x2', '\x2', '\x2', 'H', '\x147', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x14D', '\x3', '\x2', '\x2', '\x2', 'L', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x160', '\x3', '\x2', '\x2', '\x2', 'R', '\x162', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x164', '\x3', '\x2', '\x2', '\x2', 'V', '\x166', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\x5', '\b', '\x5', '\x2', 'Y', 
		'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', '_', '\x5', '\x6', 
		'\x4', '\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', 
		'\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', 
		'\x2', '\x2', '\x3', '\x61', '\x3', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\x63', '\x5', '\b', '\x5', '\x2', '\x63', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'k', '\a', '\n', '\x2', '\x2', '\x65', 'g', '\a', '\b', 
		'\x2', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 'j', 
		'l', '\a', '\x2', '\x2', '\x3', 'k', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x5', '\n', '\x6', '\x2', 'n', 'o', '\x5', '\f', '\a', 
		'\x2', 'o', '\t', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\v', '\x2', 
		'\x2', 'q', 'r', '\a', '\x19', '\x2', '\x2', 'r', 's', '\a', '\x3', '\x2', 
		'\x2', 's', 't', '\t', '\x2', '\x2', '\x2', 't', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\x5', '\xE', '\b', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'z', '|', '\a', '\t', '\x2', '\x2', '{', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', 
		'\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x84', '\x5', '\x18', '\r', '\x2', '\x81', '\x84', '\x5', '\x1A', '\xE', 
		'\x2', '\x82', '\x84', '\x5', '\x10', '\t', '\x2', '\x83', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\t', '\x2', '\x2', '\x2', '\x86', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x89', '\a', '\f', '\x2', '\x2', '\x88', 
		'\x8A', '\a', '\t', '\x2', '\x2', '\x89', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8E', '\x5', '\x42', '\"', 
		'\x2', '\x8E', '\x8F', '\t', '\x2', '\x2', '\x2', '\x8F', '\x93', '\x5', 
		'\f', '\a', '\x2', '\x90', '\x92', '\x5', '\x12', '\n', '\x2', '\x91', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x97', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x5', '\x14', '\v', 
		'\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9B', '\a', '\t', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\xF', '\x2', '\x2', '\xA0', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA3', '\a', '\t', '\x2', '\x2', '\xA2', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\a', '\r', '\x2', 
		'\x2', '\xA8', '\xAA', '\a', '\t', '\x2', '\x2', '\xA9', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		'\x42', '\"', '\x2', '\xAE', '\xAF', '\t', '\x2', '\x2', '\x2', '\xAF', 
		'\xB0', '\x5', '\f', '\a', '\x2', '\xB0', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB3', '\a', '\t', '\x2', '\x2', '\xB2', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\xE', '\x2', '\x2', '\xB8', 
		'\xB9', '\t', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x5', '\f', '\a', 
		'\x2', '\xBA', '\x15', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\a', 
		'\x1F', '\x2', '\x2', '\xBC', '\xBD', '\x5', '\x1C', '\xF', '\x2', '\xBD', 
		'\xBE', '\a', '\x1E', '\x2', '\x2', '\xBE', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x5', '\x1C', '\xF', '\x2', '\xC0', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\x5', '\x1C', '\xF', '\x2', '\xC2', 
		'\xC3', '\a', '\x1C', '\x2', '\x2', '\xC3', '\xC4', '\x5', ',', '\x17', 
		'\x2', '\xC4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC9', '\x5', 
		'\x1E', '\x10', '\x2', '\xC6', '\xC9', '\x5', ' ', '\x11', '\x2', '\xC7', 
		'\xC9', '\x5', '$', '\x13', '\x2', '\xC8', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCE', '\a', '\x15', '\x2', '\x2', '\xCB', '\xCD', '\a', '\t', '\x2', 
		'\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x5', 
		'\x42', '\"', '\x2', '\xD2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD5', '\a', '\x10', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\"', '\x12', 
		'\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD9', '\x5', '&', '\x14', '\x2', '\xD8', '\xD7', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xE2', '\x5', '*', '\x16', '\x2', '\xDB', 
		'\xDD', '\a', '\t', '\x2', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', ',', '\x17', 
		'\x2', '\xE1', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '#', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE5', '\x5', '(', '\x15', '\x2', '\xE4', '\xE6', '\x5', '*', '\x16', 
		'\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE9', '\x5', '&', '\x14', '\x2', '\xE8', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x4', '\x2', '\x2', '\xEB', 
		'\xEC', '\x5', '\x1C', '\xF', '\x2', '\xEC', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF0', '\a', '\x19', '\x2', '\x2', '\xEE', '\xF0', '\x5', 
		'\x16', '\f', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', ')', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF5', '\a', '%', '\x2', '\x2', '\xF4', '\xF6', '\x5', ',', '\x17', '\x2', 
		'\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', 
		'\a', '&', '\x2', '\x2', '\xF8', '+', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFE', '\x5', '.', '\x18', '\x2', '\xFA', '\xFB', '\a', '\x5', '\x2', 
		'\x2', '\xFB', '\xFD', '\x5', '.', '\x18', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '-', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\x105', '\x5', '\x30', '\x19', '\x2', '\x102', 
		'\x105', '\x5', '\x32', '\x1A', '\x2', '\x103', '\x105', '\x5', '\x34', 
		'\x1B', '\x2', '\x104', '\x101', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '/', '\x3', '\x2', '\x2', '\x2', '\x106', '\x10A', '\x5', 
		'\x36', '\x1C', '\x2', '\x107', '\x109', '\x5', ':', '\x1E', '\x2', '\x108', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', 
		'\x6', '\x2', '\x2', '\x10E', '\x10F', '\x5', '\x34', '\x1B', '\x2', '\x10F', 
		'\x110', '\a', '\x6', '\x2', '\x2', '\x110', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x11A', '\x5', '\x1C', '\xF', '\x2', '\x112', '\x11A', 
		'\a', '\x19', '\x2', '\x2', '\x113', '\x11A', '\x5', '\x16', '\f', '\x2', 
		'\x114', '\x11A', '\x5', '<', '\x1F', '\x2', '\x115', '\x11A', '\a', '\x1A', 
		'\x2', '\x2', '\x116', '\x11A', '\a', '\t', '\x2', '\x2', '\x117', '\x11A', 
		'\a', '\a', '\x2', '\x2', '\x118', '\x11A', '\a', '\x3', '\x2', '\x2', 
		'\x119', '\x111', '\x3', '\x2', '\x2', '\x2', '\x119', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x113', '\x3', '\x2', '\x2', '\x2', '\x119', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x119', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x116', '\x3', '\x2', '\x2', '\x2', '\x119', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', '\t', '\x3', '\x2', 
		'\x2', '\x11E', '\x121', '\x5', '\x36', '\x1C', '\x2', '\x11F', '\x121', 
		'\x5', '\x38', '\x1D', '\x2', '\x120', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x126', '\x5', 'P', ')', '\x2', '\x123', 
		'\x126', '\x5', '>', ' ', '\x2', '\x124', '\x126', '\x5', 'R', '*', '\x2', 
		'\x125', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x5', '<', '\x1F', 
		'\x2', '\x128', '\x129', '\x5', '\x36', '\x1C', '\x2', '\x129', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12D', '\x5', '@', '!', '\x2', '\x12B', 
		'\x12D', '\x5', 'T', '+', '\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', '%', '\x2', '\x2', '\x12F', 
		'\x130', '\x5', '\x30', '\x19', '\x2', '\x130', '\x131', '\a', '&', '\x2', 
		'\x2', '\x131', '?', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\t', 
		'\x4', '\x2', '\x2', '\x133', '\x41', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x138', '\x5', '\x44', '#', '\x2', '\x135', '\x137', '\x5', 'H', '%', 
		'\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13C', '\x5', 'V', ',', '\x2', '\x13C', '\x13D', '\x5', '\x44', '#', 
		'\x2', '\x13D', '\x140', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x140', 
		'\x5', '\x46', '$', '\x2', '\x13F', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x146', '\x5', 'P', ')', '\x2', '\x142', 
		'\x146', '\x5', 'L', '\'', '\x2', '\x143', '\x146', '\x5', '\x16', '\f', 
		'\x2', '\x144', '\x146', '\x5', '\x1C', '\xF', '\x2', '\x145', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x145', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x146', 'G', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\x5', 'J', '&', '\x2', '\x148', '\x149', '\x5', '\x44', '#', 
		'\x2', '\x149', 'I', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14C', '\a', 
		'\t', '\x2', '\x2', '\x14B', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14C', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x152', 
		'\x3', '\x2', '\x2', '\x2', '\x14F', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x153', '\x5', 'N', '(', '\x2', '\x151', '\x153', '\x5', 'T', 
		'+', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', '\x2', '\x152', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x156', '\a', '\t', '\x2', '\x2', '\x155', '\x154', '\x3', '\x2', 
		'\x2', '\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', '\x157', '\x155', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x158', 'K', '\x3', '\x2', '\x2', '\x2', '\x159', '\x157', '\x3', '\x2', 
		'\x2', '\x2', '\x15A', '\x15B', '\a', '%', '\x2', '\x2', '\x15B', '\x15C', 
		'\x5', '\x42', '\"', '\x2', '\x15C', '\x15D', '\a', '&', '\x2', '\x2', 
		'\x15D', 'M', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\t', '\x5', 
		'\x2', '\x2', '\x15F', 'O', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', 
		'\a', '\x1A', '\x2', '\x2', '\x161', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x163', '\x5', '\x16', '\f', '\x2', '\x163', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\x164', '\x165', '\x5', '\x16', '\f', '\x2', '\x165', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\t', '\x3', '\x2', '\x2', 
		'\x167', 'W', '\x3', '\x2', '\x2', '\x2', ')', '[', '^', 'h', 'k', 'x', 
		'}', '\x83', '\x8B', '\x93', '\x97', '\x9C', '\xA4', '\xAB', '\xB4', '\xC8', 
		'\xCE', '\xD5', '\xD8', '\xDE', '\xE1', '\xE5', '\xE8', '\xEF', '\xF1', 
		'\xF5', '\xFE', '\x104', '\x10A', '\x119', '\x11B', '\x120', '\x125', 
		'\x12C', '\x138', '\x13F', '\x145', '\x14D', '\x152', '\x157',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
