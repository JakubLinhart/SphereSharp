[function tst_trans]
tst_trans_unqualified_global_variable_access
tst_trans_unqualified_dynamic_global_variable_name_access
tst_trans_chained_uid_access_from_defname_
tst_trans_hex_number_with_leading_sharp
tst_trans_item_eval_returns_id
tst_trans_item_id_returns_defname_
tst_trans_item_defname_returns_id
tst_trans_findId_returns_empty_string_when_item_doesnt_exist
tst_trans_brackets_and_underscore_are_equivalent_for_tag_indexing
tst_trans_custom_function_arguments
tst_trans_tag_values
tst_trans_tag_remove
tst_trans_tag_induced_uid
tst_trans_local_variable_values

classMessage("transpilation tests done")

[function tst_trans_unqualified_global_variable_access]
var(tst_trans_global_variable,123)
if (<tst_trans_global_variable> == 123)
    tst_success("tst_trans_unspecified_global_variable_access success")
else
    tst_error("tst_trans_unspecified_global_variable_access failed")
endif

[function tst_trans_unqualified_dynamic_global_variable_name_access]
arg(name,"global")
tst_trans_<arg(name)>_variable=123
if (<tst_trans_<arg(name)>_variable> == 123)
    tst_success("tst_trans_unqualified_dynamic_global_variable_name_access success")
else
    tst_error("tst_trans_unqualified_dynamic_global_variable_name_access failed")
endif

[function tst_trans_chained_uid_access_from_defname_]
def_weekly_stone.tag(sometag,666)

if (<def_weekly_stone.tag(sometag)>==666)
    tst_success("tst_trans_chained_uid_access_from_defname_")
else
    tst_error("tst_trans_chained_uid_access_from_defname_")
endif

[function tst_trans_hex_number_with_leading_sharp]
arg(__x1,"#0123")
if (<arg(__x1)>==0123)
    tst_success("tst_trans_hex_number_with_leading_sharp")
else
    tst_error("tst_trans_hex_number_with_leading_sharp")
endif

[function tst_trans_item_eval_returns_id]
arg(item,<f_reduceResist_getMemory(slash)>)
if (strlen(<arg(item)>)==10)
    tst_success("tst_item_eval_returns_id")
else
    tst_error("tst_item_eval_returns_id")
endif
item.remove

[function tst_trans_item_id_returns_defname_]
arg(item,<f_reduceResist_getMemory(slash)>)
if (!strcmpi(<item.id>,i_resistModifier_slash))
    tst_success("tst_item_id_returns_defname_")
else
    tst_error("tst_item_id_returns_defname_")
endif
item.remove

[function tst_trans_item_defname_returns_id]
arg(item,<f_reduceResist_getMemory(slash)>)
if (strlen(<arg(item).defname>) < 22)
    tst_success("tst_item_defname_returns_id")
else
    tst_error("tst_item_defname_returns_id")
endif
item.remove

[itemdef i_dont_exist]
id=i_memory
name=I don't exist
type=t_eq_script 

[function tst_trans_findId_returns_empty_string_when_item_doesnt_exist]
arg(nonExistentId,<findId(i_dont_exist)>)
if !(strlen(<arg(nonExistentId)>))
    tst_success("tst_trans_findId_returns_empty_string_when_item_doesnt_exist")
else
    tst_error("tst_trans_findId_returns_empty_string_when_item_doesnt_exist")
endif

[function tst_trans_brackets_and_underscore_are_equivalent_for_tag_indexing]
tag(sometag[0],123)
if (<tag(sometag_0)> != 123)
    tst_error("tst_trans_brackets_and_underscore_are_equivalent_for_tag_indexing - assign to brackets read from underscore")
    return
endif

tag(sometag_1,666)
if (<tag(sometag[1])> != 666)
    tst_error("tst_trans_brackets_and_underscore_are_equivalent_for_tag_indexing - assign to underscore read from brackets")
    return
endif

tag.remove(sometag_1)
if (<tag(sometag[1])> == 666)
    tst_error("tst_trans_brackets_and_underscore_are_equivalent_for_tag_indexing - remove tag value")
    return
endif

tst_success("tst_trans_brackets_and_underscore_are_equivalent_for_tag_indexing")

















[function tst_trans_local_variable_values]
arg(arg1,1+1)
ShouldBeSameString(2,<arg(arg1)>)

arg(arg2,(2+2))
ShouldBeSameString(4,<arg(arg2)>)

var(var1,1)

arg(arg3,var1)
ShouldBeSameString(var1,<arg(arg3)>)

arg(arg4,var1+1)
ShouldBeSameString(var1+1,<arg(arg4)>)

arg(arg5,<var1>+1)
ShouldBeSameString(2,<arg(arg5)>)

arg(arg6,tag(v_0))
ShouldBeSameString(tag(v_0),<arg(arg6)>)

tst_success("tst_trans_local_variable_values")

[function tst_trans_custom_function_arguments]
ShouldBeSameString(2,1+1)
ShouldBeSameString(2,((1+1)))
ShouldBeSameString(abc,abc)
ShouldBeSameString("abc",abc)

var(var1,1)
ShouldBeSameString("var1",var1)
ShouldBeSameString("var1+1",var1+1)
ShouldBeSameString("1",<var1>)
ShouldBeSameString("124",<var1>+123)

[function ShouldBeSameString]
if (strcmp(<argv(0)>,<argv(1)>))
    tst_error("ShouldBeSameString failed, expected: <argv(0)>, result: <argv(1)>")
endif

[function ShouldBeEmpty]
if (safe strlen(<argv(0)>) > 0)
    tst_error(<argv(1)> should be empty but it is <argv(0)>)
endif

[function ShouldNotBeEmpty]
if (safe strlen(<argv(0)>) == 0)
    tst_error(<argv(1)> should not be empty)
endif
